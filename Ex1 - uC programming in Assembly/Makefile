#############################
# MAKEFILE FOR EX1, TDT4258 #
#############################

# NOTE: This Makefile defines that the file to take for compiling is called ex1.S, so such a file should be renamed if it has another name!!!!!!

# Definition of GNU assembler (named AS) to generate object .o file
AS=arm-none-eabi-as
# Definition of GNU linker (named LD) to generate .elf file (PROFESSOR FILE SAYS "-gcc"!!!)
LD=arm-none-eabi-ld
# Definition of GNU object copy (named OBJCOPY) to generate binary .bin file
OBJCOPY=arm-none-eabi-objcopy


# Important arguments in "GNU Assembler (GNU AS)" commands:
#	-mcpu=cortex-m3: Establishes the M3 instruction set.
#	-nostdlib: Do not include any standard libraries.
#	-g: Make debug symbols so that program can be debugged with GDB.
#	-o <outputfile.elf>: Write result of compiling to file \outputfile.elf" (other formats also possible).
#	-T <linkerscript>: Specifies which likerscript to use.
#	-j .text: To convert the text segment.
#	-r: Resets the uC.
#	-f: Takes a file name as an argument.
#	--address: Uploads the file to the address specified.

LDFLAGS=-nostdlib
ASFLAGS=-mcpu=cortex-m3 -mthumb -g

# The linker needs to know how memory is used for a specific uC. Thus the memory setup is taken as input file to do a correct mapping to the output file.
LINKERSCRIPT=efm32gg.ld


# Structure of rules to write in Makefile:
# target_file : dependencies
#	command_line
#		- target_file: The name of the resulting file
#		- dependencies: List of files (separated by space caracter) on which the target file depends
#		- command_line: Command line which is executed to generate the target file (always in a separate line and beginnig with a tab)

# Get raw binary using the object copy (ex1.bin generated)
ex1.bin : ex1.elf
	${OBJCOPY} -j .text -O binary $< $@
# Reagrupates all object files using the linker (ex1.elf generated)
ex1.elf : ex1.o
	${LD} -T ${LINKERSCRIPT} $^ -o $@ ${LDFLAGS}
# Source code is compiled using the assembler (ex1.o generated)
ex1.o : ex1.S
	${AS} ${ASFLAGS} $< -o $@


# Command "make upload" created. Flashes the program onto the board.
# This command first resets the uC, uploads the file "ex1.bin" to address 0x0 in the flash, and then resets the uC again.
.PHONY : upload
upload :
	-eACommander.sh -r --address 0x00000000 -f "ex1.bin" -r
# Command "make clean" created. Removes all autogenerated files, keeping only source files (typically placed at the bottom of Makefile)
.PHONY : clean
clean :
	-rm -rf *.o *.elf *.bin *.hex